#Испытание свойствами и методами Видео-разбор (решение смотреть только после своей попытки):
# https://youtu.be/26pwwOu_-d0    Время первого испытания. Представьте, что вы получили задание от заказчика.
# Вас просят реализовать простую имитацию локальной сети, состоящую из набора серверов, соединенных между собой
# через роутер.Каждый сервер может отправлять пакет любому другому серверу сети. Для этого у каждого есть свой
# уникальный IP-адрес. Для простоты - это просто целое (натуральное) число от 1 и до N, где N - общее число серверов.
# Алгоритм следующий. Предположим, сервер с IP = 2 собирается отправить пакет информации серверу с IP = 3. Для этого,
# он сначала отправляет пакет роутеру, а уже тот, смотрит на IP-адрес и пересылает пакет нужному узлу (серверу).

class Server:
    """для описания работы серверов в сети Соответственно в объектах класса Server должны быть локальные свойства:"""
    server__ip = 1

    def __init__(self):
        self.buffer = []  # buffer - список принятых пакетов (изначально пустой)
        self.ip = Server.server__ip  # ip - IP-адрес текущего сервера, каждый новый созданный объект = ip предыдущего + 1
        Server.server__ip += 1
        self.router = None  # привязка объекта сервера к роутеру

    def send_data(self, data):
        """для отправки информационного пакета data (объекта класса Data) с указанным IP-адресом получателя
        (пакет отправляется роутеру и сохраняется в его буфере - локальном свойстве buffer); """
        if self.router:
            self.router.buffer.append(data)
            # self.router-вызвать объект роутера и добавить в buffer в классе роутера data

    def get_data(self):
        """возвращает список принятых пакетов (если ничего принято не было,
        то возвращается пустой список) и очищает входной буфер;   """
        packets = self.buffer[:]
        self.buffer.clear()
        return packets

    def get_ip(self):
        """возвращает свой IP-адрес.  """
        return self.ip


class Router:
    """для описания работы роутеров в сети (в данной задаче полагается один роутер). И одно обязательное локальное
    свойство (могут быть и другие свойства):   """

    def __init__(self):
        self.buffer = []  # список для хранения принятых от серверов пакетов (объектов класса Data).
        self.servers = {}  # список серверов подключенных к роутеру, объекты класса Server от которых принимаются пакеты
        # и отправляются пакеты из роутера другим серверам

    def link(self, server):
        """для присоединения сервера server (объекта класса Server) к роутеру  """
        self.servers[server.ip] = server  # для присоединения сервера server (объекта класса Server)
        server.router = self  # связывания роутера с сервером

    def unlink(self, server):
        """для отсоединения сервера server (объекта класса Server) от роутера        """
        s = self.servers.pop(server.ip, False)
        if s:
            s.router = None  # отвязка роутера от сервера

    def send_data(self):
        """для отправки всех пакетов (объектов класса Data) из буфера роутера
                соответствующим серверам (после отправки буфер должен очищаться) """

        for d in self.buffer:  # перебрать d объекты класса Data
            if d.ip in self.servers:  # ip - IP-адрес назначения из класса Data
                self.servers[d.ip].buffer.append(d)  # обратиться по ip к соотв серверу и
                # добавили пакет d в buffer кл Server
        self.buffer.clear()


class Data:
    """для описания пакета информации объекты класса Data должны содержать, два следующих локальных свойства: """

    def __init__(self, data, ip):
        self.data = data  # data - передаваемые данные (строка)
        self.ip = ip  # ip - IP-адрес назначения.

router = Router()
sv_from = Server()
sv_from2 = Server()
router.link(sv_from)
router.link(sv_from2)
router.link(Server())
router.link(Server())
sv_to = Server()
router.link(sv_to)
sv_from.send_data(Data("Hello", sv_to.get_ip()))
sv_from2.send_data(Data("Hello", sv_to.get_ip()))
sv_to.send_data(Data("Hi", sv_from.get_ip()))
router.send_data()
msg_lst_from = sv_from.get_data()
msg_lst_to = sv_to.get_data()